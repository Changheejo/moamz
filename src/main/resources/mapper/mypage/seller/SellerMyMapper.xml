<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.moamz.mapper.mypage.seller.SellerMyMapper">
    <!-- 우수업체 여부 반환 -->
    <select id="selectExcellentStore" parameterType="Long" resultType="String">
        SELECT CASE
                    WHEN COUNT(*) > 0 THEN 'TRUE'
                    ELSE 'FALSE'
                END AS isTopBusiness
        FROM (
            -- 업체별로 음식물 중량 누적 합계를 구하고, 상위 3개 업체를 SELECT
            SELECT FG_BUSINESS_ID
            FROM (
                SELECT p.FG_BUSINESS_ID
                FROM FG_ORDER o, FG_PRODUCT p
                WHERE o.FG_PRODUCT_ID = p.FG_PRODUCT_ID
                AND o.FG_PAYMENT_STATUS = '결제완료'
                GROUP BY p.FG_BUSINESS_ID
                ORDER BY SUM(o.FG_ORDER_QUANTITY * p.FG_PRODUCT_WEIGHT) DESC
            )
            WHERE <![CDATA[ROWNUM <= 3]]>
        )
        WHERE FG_BUSINESS_ID = #{businessId}  -- 내 업체 번호
    </select>

    <!-- 판매자 프로필 -->
    <select id="selectStoreProfile" parameterType="Long" resultType="SellerProfileDTO">
        SELECT uf.FG_USER_FILE_NAME AS userFileName,
               uf.FG_USER_FILE_ROOT AS userFileRoot,
               uf.FG_USER_FILE_UUID AS userFileUuid,
               b.FG_BUSINESS_NAME AS businessName,
               b.FG_BUSINESS_RATING AS businessRating,
               b.FG_BUSINESS_ID AS businessId,
               COALESCE(SUM(o.FG_ORDER_QUANTITY * p.FG_PRODUCT_WEIGHT), 0) AS totalWeight
        FROM FG_BUSINESS b
            JOIN FG_USER_FILE uf ON b.FG_USER_CODE = uf.FG_USER_CODE
            LEFT JOIN FG_PRODUCT p ON p.FG_BUSINESS_ID = b.FG_BUSINESS_ID
            LEFT JOIN FG_ORDER o ON o.FG_PRODUCT_ID = p.FG_PRODUCT_ID
            AND o.FG_PAYMENT_STATUS = '결제완료'
        WHERE b.FG_USER_CODE = #{userCode}
        GROUP BY uf.FG_USER_FILE_NAME, uf.FG_USER_FILE_ROOT, uf.FG_USER_FILE_UUID,
                 b.FG_BUSINESS_NAME, b.FG_BUSINESS_RATING, b.FG_BUSINESS_ID
    </select>


    <!-- 업체 리뷰 조회 -->
    <select id="selectMyStoreRv" parameterType="Long" resultType="StoreReviewDTO">
        SELECT nu.FG_NORMAL_NICKNAME AS normalNickname,
               rv.FG_REVIEW_CONTENT AS reviewContent,
               p.FG_PRODUCT_NAME AS productName,
               rv.FG_REVIEW_RATING AS reviewRating,
               TO_CHAR(rv.FG_REVIEW_CREATED_AT, 'YYYY/MM/DD') AS reviewCreatedAt
        FROM FG_REVIEW rv, FG_NORMAL_USER nu, FG_PRODUCT p, FG_ORDER o
        WHERE rv.FG_USER_CODE = nu.FG_USER_CODE
          AND rv.FG_ORDER_ID = o.FG_ORDER_ID
          AND o.FG_PRODUCT_ID = p.FG_PRODUCT_ID
          AND rv.FG_BUSINESS_ID = #{businessId}
    </select>

    <!-- 업체 리뷰 조회 (페이징O) -->
    <select id="selectMyStoreRvAll" parameterType="Criteria" resultType="StoreReviewDTO">
        <![CDATA[
        SELECT normalNickname, reviewContent, productName, reviewRating,
               reviewCreatedAt
        FROM (
                 SELECT nu.FG_NORMAL_NICKNAME AS normalNickname,
                        rv.FG_REVIEW_CONTENT AS reviewContent,
                        p.FG_PRODUCT_NAME AS productName,
                        rv.FG_REVIEW_RATING AS reviewRating,
                        TO_CHAR(rv.FG_REVIEW_CREATED_AT, 'YYYY/MM/DD HH24:MI') AS reviewCreatedAt,
                        ROW_NUMBER() OVER (ORDER BY rv.FG_REVIEW_CREATED_AT DESC, rv.FG_REVIEW_ID DESC) AS RNUM
                 FROM FG_REVIEW rv, FG_NORMAL_USER nu, FG_PRODUCT p, FG_ORDER o
                 WHERE rv.FG_USER_CODE = nu.FG_USER_CODE
                   AND rv.FG_ORDER_ID = o.FG_ORDER_ID
                   AND o.FG_PRODUCT_ID = p.FG_PRODUCT_ID
                   AND rv.FG_BUSINESS_ID = #{businessId}
             )
        WHERE RNUM > (#{criteria.page} - 1) * #{criteria.amount}
          AND RNUM <= #{criteria.page} * #{criteria.amount}
        ]]>
    </select>

    <!-- 총 리뷰 수 -->
    <select id="selectTotal" resultType="int">
        SELECT COUNT(FG_REVIEW_ID)
        FROM FG_REVIEW
        WHERE FG_BUSINESS_ID = #{businessId}
    </select>

    <!-- 판매자 업체 아이디 반환 -->
    <select id="selectBusinessId" parameterType="Long" resultType="Long">
        SELECT FG_BUSINESS_ID
        FROM FG_BUSINESS b
        JOIN FG_COMMON_USER cu ON b.FG_USER_CODE = cu.FG_USER_CODE
        AND b.FG_USER_CODE = ${userCode}
    </select>

    <!-- 유저 아이디 반환 -->
    <select id="selectSellerId" parameterType="Long" resultType="String">
        SELECT FG_USER_ID
        FROM FG_COMMON_USER
        WHERE FG_USER_CODE = ${userCode}
    </select>

    <!-- userCode로 비밀번호 조회하기 -->
    <select id="selectSellerPw" parameterType="Long" resultType="String">
        SELECT FG_USER_PASSWORD
        FROM FG_COMMON_USER
        WHERE FG_USER_CODE = #{userCode}
    </select>

    <!-- 개인정보 가져오기 -->
    <select id="selectSellerInfo" parameterType="Long" resultType="SellerInfoDTO">
        --이름, 아이디, 폰번호
        SELECT s.FG_SELLER_NAME AS sellerName,
               cu.FG_USER_ID AS userId,
               s.FG_SELLER_PHONE AS sellerPhone
        FROM FG_COMMON_USER cu, FG_SELLER s
        WHERE cu.FG_USER_CODE = s.FG_USER_CODE
        AND cu.FG_USER_CODE = #{userCode}
    </select>

    <!-- 휴대폰번호 조회하기 -->
    <select id="selectSellerPhone" parameterType="Long" resultType="String">
        SELECT FG_SELLER_PHONE
        FROM FG_SELLER
        WHERE FG_USER_CODE = #{userCode}
    </select>

    <!-- 휴대폰번호 변경하기 -->
    <update id="modifySellerPhone">
        UPDATE FG_SELLER
        SET FG_SELLER_PHONE = #{inputPhone}
        WHERE FG_USER_CODE = #{userCode}
    </update>

    <!-- 비밀번호 변경하기 -->
    <update id="modifySellerPw">
        UPDATE FG_COMMON_USER
        SET FG_USER_PASSWORD = #{inputPw}
        WHERE FG_USER_CODE = #{userCode}
    </update>

    <!-- 업체 정보 가져오기 -->
    <select id="selectStoreInfo" parameterType="Long" resultType="StoreInfoDTO">
        -- 업체명, 사업자번호, 주소, 대표번호, 시간, 상세정보
        SELECT b.FG_USER_CODE AS userCode,
               b.FG_BUSINESS_NAME AS businessName, b.FG_BUSINESS_NUMBER AS businessNumber,
               b.FG_BUSINESS_POSTCODE AS postcode,
               b.FG_BUSINESS_ADDRESS AS address, b.FG_BUSINESS_ADDRESS_DETAIL AS addressDetail,
               b.FG_BUSINESS_PHONE AS businessPhone,
               b.FG_BUSINESS_OPEN_TIME AS openTime, b.FG_BUSINESS_CLOSE_TIME AS closeTime,
               b.FG_BUSINESS_DETAIL AS businessDetail,
               uf.FG_USER_FILE_ROOT AS userFileRoot, uf.FG_USER_FILE_NAME AS userFileName,
               uf.FG_USER_FILE_UUID AS userFileUuid
        FROM FG_BUSINESS b, FG_USER_FILE uf
        WHERE b.FG_USER_CODE = uf.FG_USER_CODE
          AND b.FG_USER_CODE = #{userCode}
    </select>

    <!-- 업체 정보 변경하기 -->
    <update id="modifyStoreInfo" parameterType="StoreModifyDTO">
        UPDATE FG_BUSINESS
        SET FG_BUSINESS_POSTCODE = #{postcode},
            FG_BUSINESS_ADDRESS = #{address},
            FG_BUSINESS_ADDRESS_DETAIL = #{addressDetail},
            FG_BUSINESS_PHONE = #{businessPhone},
            FG_BUSINESS_OPEN_TIME = #{openTime},
            FG_BUSINESS_CLOSE_TIME = #{closeTime},
            FG_BUSINESS_DETAIL = #{businessDetail}
        WHERE FG_USER_CODE = #{userCode}
    </update>

    <!-- 회원 탈퇴 -->
    <delete id="deleteUser" parameterType="Long">
        DELETE FROM FG_COMMON_USER
        WHERE FG_USER_CODE = #{userCode}
    </delete>

    <!-- 판매자 프로필 쿼리 -->
    <!--         SELECT uf.FG_USER_FILE_NAME AS userFileName,
               uf.FG_USER_FILE_ROOT AS userFileRoot,
               uf.FG_USER_FILE_UUID AS userFileUuid,
                b.FG_BUSINESS_NAME AS businessName,
               b.FG_BUSINESS_RATING AS businessRating,
               COALESCE(SUM(o.FG_ORDER_QUANTITY * p.FG_PRODUCT_WEIGHT), 0) AS totalWeight
        FROM FG_BUSINESS b, FG_USER_FILE uf, FG_ORDER o, FG_PRODUCT p
        WHERE b.FG_USER_CODE = uf.FG_USER_CODE
          AND o.FG_PRODUCT_ID = p.FG_PRODUCT_ID(+)
          AND p.FG_BUSINESS_ID = b.FG_BUSINESS_ID(+)
          AND o.FG_PAYMENT_STATUS = '결제완료'
          AND b.FG_USER_CODE = #{userCode}
        GROUP BY uf.FG_USER_FILE_NAME, uf.FG_USER_FILE_ROOT, uf.FG_USER_FILE_UUID,
                 b.FG_BUSINESS_NAME, b.FG_BUSINESS_RATING
     -->

</mapper>